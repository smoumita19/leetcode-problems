Solution 1 - With fixed array, for loops
============================================

class Solution {
    int[] arr = new int[2];
    public int[] twoSum(int[] nums, int target) {
        for(int i = 0; i < nums.length; i++){
            for(int j = i+1; j < nums.length; j++){
                if(nums[i] + nums[j] == target)
                {
                    arr[0] = i;
                    arr[1] = j;
                }
            }
        }
        return arr;
    }
}

Status - Accepted
Runtime - 95 ms - 73 ms
Memory - 45 MB
Language - Java

Solution 2 - With fixed array, while loop
=============================================

class Solution {
    int[] arr = new int[2];
    int i = 0;
    public int[] twoSum(int[] nums, int target) {
        while(i < nums.length)
        {
            int j = i+1;
            while(j < nums.length)
            {
                 if(nums[i] + nums[j] == target)
                {
                    arr[0] = i;
                    arr[1] = j;
                }
                j++;
            }
            i++;
        }
        return arr;
    }
}

Status - Accepted
Runtime - 41 ms
Memory - 42.1 MB
Language - Java

Solution 3 - With Hashmap
============================================

class Solution {
    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer, Integer> map = new HashMap();
        
        for(int i=0; i < nums.length ; i++)
        {
            int complement = target - nums[i];
            if(map.containsKey(complement))
            {
                return new int[] {map.get(complement), i};
            } else {
                map.put(nums[i], i);
            }
        }
        
        return new int[] {};
    }
}

Status - Accepted
Runtime - 4 ms
Memory - 45 MB 
Language - Java
